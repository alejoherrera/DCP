const GEMINI_API_KEY = "";
function createTrigger() {
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
  
  ScriptApp.newTrigger('checkNewEmails')
    .timeBased()
    .everyMinutes(1)
    .create();
}

function checkNewEmails() {
  try {
    var label = GmailApp.getUserLabelByName('Procesado');
    if (!label) {
      label = GmailApp.createLabel('Procesado');
    }
    
    var threads = GmailApp.search('from:*@cgr.go.cr -label:Procesado is:unread "SICOP le informa" newer_than:7d');
    Logger.log('Correos encontrados: ' + threads.length);
    
    for (var i = 0; i < threads.length; i++) {
      try {
        var thread = threads[i];
        var messages = thread.getMessages();
        var lastMessage = messages[messages.length - 1];
        Logger.log('Procesando mensaje del hilo...');
        processMessage(lastMessage);
      } catch (threadError) {
        logError('THREAD_PROCESSING_ERROR', threadError);
      }
    }
  } catch (e) {
    logError('EMAIL_SEARCH_ERROR', e);
  }
}

function processMessage(message) {
 try {
   var body = message.getPlainBody();
   var sender = message.getFrom().match(/<(.+?)>/)[1] || message.getFrom();
   var emailDate = new Date(message.getDate());
   
   Logger.log('Procesando correo de: ' + sender);
   Logger.log('Contenido del correo: ' + body.substring(0, 200));
   
   // Buscar el número de procedimiento con asteriscos o sin ellos
   var procedimientoMatch = body.match(/procedimiento número \*?(\d{4}LY-\d{6}-\d{10})\*?/i) || 
                           body.match(/contra el procedimiento número \*?(\d{4}LY-\d{6}-\d{10})\*?/i) ||
                           body.match(/procedimiento número \*?(\d{4}LE-\d{6}-\d{10})\*?/i);
                           
   if (!procedimientoMatch) {
     // Si no se encuentra, buscar de forma más genérica
     procedimientoMatch = body.match(/\*?(\d{4}LY-\d{6}-\d{10})\*?/i) || 
                         body.match(/\*?(\d{4}LE-\d{6}-\d{10})\*?/i);
   }
   
   if (!procedimientoMatch) {
     logError('INVALID_FORMAT_ERROR', new Error('Formato de procedimiento no encontrado en el correo'));
     Logger.log('No se encontró procedimiento en el texto');
     return;
   }

   var procedimientoNum = procedimientoMatch[1];
   Logger.log('Procedimiento encontrado: ' + procedimientoNum);
   
   fetchSICOPPage(procedimientoNum, sender, message, emailDate);
   
   // Marcar el mensaje y el hilo como leídos
   message.markRead();
   message.getThread().markRead();
   var label = GmailApp.getUserLabelByName('Procesado');
   label.addToThread(message.getThread());
   
 } catch (e) {
   logError('MESSAGE_PROCESSING_ERROR', e);
 }
}

function isWorkingDay(date) {
  var day = date.getDay();
  return day !== 0 && day !== 6;
}

function getWorkingDays(startDate, endDate) {
  let workingDays = 0;
  const currentDate = new Date(startDate);
  
  while (currentDate <= endDate) {
    if (isWorkingDay(currentDate)) {
      workingDays++;
    }
    currentDate.setDate(currentDate.getDate() + 1);
  }
  return workingDays;
}

function extractPublicationDate(html) {
  const regex = /class="tdc"[^>]*>\s*(\d{2}\/\d{2}\/\d{4})\s*</g;
  const dates = [];
  let match;
  
  while ((match = regex.exec(html)) !== null) {
    const [_, dateStr] = match;
    const [day, month, year] = dateStr.trim().split('/').map(Number);
    dates.push(new Date(year, month - 1, day));
  }

  if (dates.length === 0) {
    throw new Error('No se encontró la fecha de publicación');
  }

  const latestDate = new Date(Math.max.apply(null, dates));
  return latestDate;
}

function analyzeDates(emailDate, detailsHtml) {
  Logger.log('Contenido HTML para analizar fechas:', detailsHtml.substring(0, 500));
  const publicationDate = extractPublicationDate(detailsHtml);
  Logger.log('Fecha de publicación encontrada:', publicationDate);
  Logger.log('Fecha del correo:', emailDate);
  
  const workingDays = getWorkingDays(publicationDate, emailDate);
  const status = workingDays <= 10 ? 'EN TIEMPO' : 'EXTEMPORÁNEO';
  
  const formatDate = (date) => {
    return date.toLocaleDateString('es-CR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  return {
    emailDate: formatDate(emailDate),
    publicationDate: formatDate(publicationDate),
    workingDays: workingDays,
    status: status
  };
}
function convertHtmlToPdfViaDoc(htmlContent, fileName, attempt = 1) {
 try {
   if (attempt > 3) {
     throw new Error('Máximo de intentos alcanzado en conversión PDF');
   }
   
   var doc = DocumentApp.create('temp_' + fileName);
   var body = doc.getBody();
   
   var cleanHtml = htmlContent
     .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
     .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
   body.appendParagraph(cleanHtml);
   doc.saveAndClose();
   
   var pdfBlob = doc.getAs('application/pdf');
   DriveApp.getFileById(doc.getId()).setTrashed(true);
   
   return {
     fileName: fileName + '.pdf',
     content: pdfBlob.getBytes(),
     mimeType: 'application/pdf'
   };
 } catch (e) {
   logError('PDF_CONVERSION_ERROR', e);
   if (e.message.includes('Service unavailable')) {
     Utilities.sleep(Math.pow(2, attempt) * 1000); // Espera exponencial
     return convertHtmlToPdfViaDoc(htmlContent, fileName, attempt + 1);
   }
   return null;
 }
}
function fetchSICOPPage(procedimientoNum, sender, originalMessage, emailDate) {
  const searchUrl = 'https://www.sicop.go.cr/moduloPcont/pcont/ctract/es/CE_CEJ_ESQ001.jsp';
  const resultsUrl = 'https://www.sicop.go.cr/moduloPcont/pcont/ctract/es/CE_CEJ_ESQ002.jsp';
  const detailUrl = 'https://www.sicop.go.cr/moduloPcont/pcont/ctract/es/CE_CEJ_ESQ003.jsp';
  
  try {
    var searchOptions = {
      'method': 'post',
      'payload': {
        'sch_instNo': procedimientoNum,
        'reqNo': '',
        'cartelNo': '',
        'sch_reqNo': '',
        'sch_reqIdoNo': ''
      },
      'followRedirects': true,
      'muteHttpExceptions': true
    };

    Logger.log('Enviando solicitud inicial a SICOP...');
    var response1 = UrlFetchApp.fetch(searchUrl, searchOptions);
    Utilities.sleep(2000);
    
    var html = response1.getContentText();
    var reqNoMatch = html.match(/fn_detail\('([^']+)','([^']+)'\)/);
    if (!reqNoMatch) {
      throw new Error('No se encontraron los parámetros necesarios');
    }
    
    var reqNo = reqNoMatch[1];
    var cartelNo = reqNoMatch[2];
    
    var detailOptions = {
      'method': 'post',
      'payload': {
        'reqNo': reqNo,
        'cartelNo': cartelNo
      },
      'followRedirects': true,
      'muteHttpExceptions': true
    };
    
    Logger.log('Obteniendo detalles del procedimiento...');
    var response2 = UrlFetchApp.fetch(resultsUrl, detailOptions);
    Utilities.sleep(2000);
    
    var descriptionOptions = {
      'method': 'post',
      'payload': {
        'reqNo': reqNo,
        'cartelNo': cartelNo,
        'accion': 'consultar_descripcion'
      },
      'muteHttpExceptions': true
    };
    
    Logger.log('Obteniendo descripción...');
    var response3 = UrlFetchApp.fetch(detailUrl, descriptionOptions);
    
    var pages = {
      search: response1.getBlob(),
      details: response2.getBlob(),
      description: response3.getBlob(),
      urls: [searchUrl, resultsUrl, detailUrl]
    };
    
    sendResultEmail(sender, procedimientoNum, pages, originalMessage, emailDate);
  } catch (e) {
    logError('SICOP_REQUEST_ERROR', e);
    sendErrorEmail(sender, procedimientoNum, e.toString());
  }
}

function processSummary(text) {
  const sections = [
    {title: "Cantidad de Empaque Secundario", pattern: /Cantidad de Empaque Secundario/},
    {title: "Eliminación del Empaque Terciario", pattern: /Eliminación del Empaque Terciario/},
    {title: "Restricciones Injustificadas", pattern: /Restricciones Injustificadas/},
    {title: "Fundamentación del Recurso", pattern: /Fundamentación del Recurso/}
  ];
  
  let formattedContent = '<div style="font-family: Arial, sans-serif;">';
  sections.forEach(section => {
    const pattern = new RegExp(`${section.pattern.source}:(.*?)(?=${sections.map(s => s.pattern.source).join('|')}|$)`, 's');
    const match = text.match(pattern);
    if (match) {
      formattedContent += `
        <div style="margin-bottom: 15px;">
          <div style="font-weight: bold; margin-bottom: 5px;">${section.title}:</div>
          <div style="font-size: 0.9em; margin-left: 15px; line-height: 1.4;">${match[1].trim()}</div>
        </div>`;
    }
  });
  formattedContent += '</div>';
  return formattedContent;
}





const FOLDER_IDS = ['1AkBzZ1Mb3RB8Ir']; // Reemplazar con IDs reales



function searchDriveFiles(text, folderIds) {
  Logger.log('Drive - Buscando: ' + text);
  try {
    let allResults = [];
    for (const folderId of folderIds) {
      const folder = DriveApp.getFolderById(folderId);
      const query = `fullText contains '${text}' and (mimeType = 'application/pdf' or mimeType = 'application/vnd.google-apps.document')`;
      Logger.log('Drive - Query: ' + query);
      
      const files = folder.searchFiles(query);
      while (files.hasNext()) {
        const file = files.next();
        Logger.log('Archivo encontrado: ' + file.getName() + ' (ID: ' + file.getId() + ')');
        
        allResults.push({
          id: file.getId(),
          name: file.getName(),
          url: file.getUrl(),
          mimeType: file.getMimeType(),
          snippet: file.getMimeType() === 'application/vnd.google-apps.document' ? 
            DocumentApp.openById(file.getId()).getBody().getText().substring(0, 200) : 
            'Archivo PDF'
        });
      }
    }
    Logger.log('Drive - Resultados encontrados: ' + allResults.length);
    return allResults.slice(0, 3); // Limitamos a 3 resultados para no sobrecargar
  } catch(e) {
    Logger.log('Error búsqueda Drive: ' + e);
    return null;
  }
}

async function searchCGRFiles(text) {
 const API_KEY = ''; 
 const CX = '';           
 const searchUrl = `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CX}&q=${encodeURIComponent(text + ' cgr.go.cr')}`;
 
 Logger.log('Web - Buscando: ' + text);
 Logger.log('Web - URL: ' + searchUrl);
 
 try {
   const response = await UrlFetchApp.fetch(searchUrl);
   const result = JSON.parse(response.getContentText());
   Logger.log('Web - Respuesta completa: ' + JSON.stringify(result));
   
   if (result.items?.length > 0) {
     const relevantResult = result.items.find(item => 
       ['R-DCA', 'R-DCP', 'Contraloría General', 'División de Contratación']
         .some(term => item.title?.includes(term) || item.snippet?.includes(term))
     );
     const resultToUse = relevantResult || result.items[0];
     Logger.log('Web - Resultado seleccionado: ' + JSON.stringify(resultToUse));
     return {
       url: resultToUse.link,
       snippet: resultToUse.snippet
     };
   }
 } catch (e) {
   Logger.log('Error búsqueda web: ' + e);
 }
 return null;
}

// Format and process content
function processConceptsAndFormat(summary) {
  let concepts = [];
  
  // Extract concepts section
  const conceptsMatch = summary.match(/CONCEPTOS\s+CLAVES?:([^]*?)$/i);
  if (!conceptsMatch) return { formattedText: summary.replace(/\*/g, ''), cleanedConcepts: [] };
  
  // Get main content without concepts section
  let mainContent = summary.substring(0, conceptsMatch.index).trim();
  
  // Clean and extract concepts
  concepts = conceptsMatch[1]
    .split(/[;,.\n*-]/)
    .map(c => c.trim().replace(/\*/g, ''))
    .filter(c => c && c.length > 0 && !c.toLowerCase().includes('conceptos'));
  
  // Process main content
  // 1. Format bold text
  mainContent = mainContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  // 2. Remove any remaining asterisks
  mainContent = mainContent.replace(/\*/g, '');
  
  // Split into paragraphs and process each
  let paragraphs = mainContent.split(/\n+/).filter(p => p.trim());
  
  // Format paragraphs with proper spacing
  let formattedParagraphs = paragraphs.map(p => {
    if (p.toLowerCase().includes('petitoria:')) {
      return `<p style="margin: 1.5em 0;"><strong>Petitoria:</strong> ${p.replace(/petitoria:/i, '').trim()}</p>`;
    } else if (p.includes(':')) {
      let [title, content] = p.split(':');
      return `<p style="margin: 1em 0;"><strong>${title}:</strong> ${content.trim()}</p>`;
    }
    return `<p style="margin: 1em 0;">${p.trim()}</p>`;
  });
  
  // Combine formatted content
  let formattedText = formattedParagraphs.join('\n');
  
  // Add concepts section
  if (concepts.length > 0) {
    formattedText += `\n<p style="margin-top: 1.5em;"><strong>CONCEPTOS CLAVES:</strong> ${concepts.join('; ')}</p>`;
  }
  
  return {
    formattedText,
    cleanedConcepts: concepts
  };
}

// Create folder and set permissions for cgr.go.cr domain
function createProcedureFolder(procedimientoNum) {
  try {
    // Create the folder
    const folder = DriveApp.createFolder(procedimientoNum);
    
    // Set sharing to "Anyone with link in domain can view"
    folder.setSharing(DriveApp.Access.DOMAIN_WITH_LINK, DriveApp.Permission.EDIT);
    
    return {
      id: folder.getId(),
      url: folder.getUrl(),
      folder: folder
    };
  } catch(e) {
    Logger.log('Error creating folder: ' + e);
    throw e;
  }
}

// Save web result to Drive folder
function saveWebResultToFolder(webResult, folder) {
  if (!webResult || !webResult.url) return null;
  
  try {
    // Download the file
    const response = UrlFetchApp.fetch(webResult.url, {muteHttpExceptions: true});
    if (response.getResponseCode() !== 200) return null;
    
    const blob = response.getBlob();
    
    // If it's a PDF, convert to Google Doc
    if (blob.getContentType() === 'application/pdf') {
      const tempFile = folder.createFile(blob);
      const docFile = Drive.Files.copy({
        title: tempFile.getName().replace('.pdf', ' - Convertido'),
        mimeType: 'application/vnd.google-apps.document'
      }, tempFile.getId());
      
      // Eliminar archivo temporal después de la conversión
      tempFile.setTrashed(true);
      
      return {
        name: docFile.title,
        url: `https://docs.google.com/document/d/${docFile.id}/edit`,
        type: 'converted'
      };
    } else {
      // Si no es PDF, guardar como está
      const file = folder.createFile(blob);
      return {
        name: file.getName(),
        url: file.getUrl(),
        type: 'original'
      };
    }
  } catch(e) {
    Logger.log('Error saving web result: ' + e);
    return null;
  }
}

function copyDriveFileToFolder(fileId, folder) {
  try {
    const originalFile = DriveApp.getFileById(fileId);
    const fileName = originalFile.getName();
    Logger.log('Copiando archivo: ' + fileName);
    
    if (originalFile.getMimeType() === 'application/pdf') {
      Logger.log('Archivo es PDF, convirtiendo a Google Doc');
      // Primero hacemos una copia del PDF en la carpeta destino
      const tempFile = originalFile.makeCopy(fileName, folder);
      
      // Luego convertimos esa copia a Google Doc
      const resource = {
        title: fileName.replace('.pdf', ' - Convertido'),
        mimeType: 'application/vnd.google-apps.document'
      };
      
      // Usamos la API avanzada de Drive para la conversión
      const docFile = Drive.Files.copy(resource, tempFile.getId());
      Logger.log('Archivo convertido: ' + docFile.title);
      
      // Aseguramos que el nuevo documento esté en la carpeta correcta
      DriveApp.getFileById(docFile.id).moveTo(folder);
      
      // Eliminamos el PDF temporal
      tempFile.setTrashed(true);
      
      return {
        name: docFile.title,
        url: `https://docs.google.com/document/d/${docFile.id}/edit`,
        type: 'converted'
      };
    } else if (originalFile.getMimeType() === 'application/vnd.google-apps.document') {
      // Si ya es un Google Doc, solo hacemos una copia
      Logger.log('Archivo ya es Google Doc, copiando');
      const newFile = originalFile.makeCopy(fileName + ' - Copia', folder);
      return {
        name: newFile.getName(),
        url: newFile.getUrl(),
        type: 'original'
      };
    } else {
      Logger.log('Archivo no es PDF ni Google Doc, copiando original');
      const newFile = originalFile.makeCopy(fileName, folder);
      return {
        name: newFile.getName(),
        url: newFile.getUrl(),
        type: 'original'
      };
    }
  } catch(e) {
    Logger.log('Error copying drive file: ' + e);
    return null;
  }
}

// Guardar el texto del recurso en la carpeta
function saveRecursoToFolder(contenido, procedimientoNum, recursoNum, folder) {
  try {
    // Crear el archivo de texto
    const fileName = `Recurso ${recursoNum} - ${procedimientoNum}.txt`;
    const file = folder.createFile(fileName, contenido, MimeType.PLAIN_TEXT);
    
    // Convertir a Google Doc
    const docFile = Drive.Files.copy({
      title: fileName.replace('.txt', ' - Convertido'),
      mimeType: 'application/vnd.google-apps.document'
    }, file.getId());
    
    // Eliminar archivo temporal
    file.setTrashed(true);
    
    return {
      name: docFile.title,
      url: `https://docs.google.com/document/d/${docFile.id}/edit`,
      type: 'converted'
    };
  } catch(e) {
    Logger.log('Error saving recurso text: ' + e);
    return null;
  }
}

// Process search results
function processSearchResults(concepto, procedureFolderId) {
  try {
    const folder = DriveApp.getFolderById(procedureFolderId);
    let results = {
      web: null,
      drive: [],
      folderUrl: folder.getUrl()
    };
    
    // Search Drive
    Logger.log('Iniciando búsqueda en Drive para: ' + concepto);
    const driveResults = searchDriveFiles(concepto, FOLDER_IDS);
    
    if (driveResults?.length > 0) {
      Logger.log(`Encontrados ${driveResults.length} resultados en Drive`);
      
      for (const result of driveResults) {
        Logger.log('Procesando resultado: ' + result.url);
        // Extraer ID del archivo de la URL
        const fileId = result.url.match(/[-\w]{25,}/);
        
        if (fileId) {
          Logger.log('ID del archivo encontrado: ' + fileId[0]);
          try {
            const file = DriveApp.getFileById(fileId[0]);
            Logger.log('Nombre del archivo original: ' + file.getName());
            
            const savedFile = copyDriveFileToFolder(fileId[0], folder);
            if (savedFile) {
              Logger.log('Archivo copiado exitosamente: ' + savedFile.name);
              results.drive.push(savedFile);
            } else {
              Logger.log('Error al copiar el archivo');
            }
          } catch (fileError) {
            Logger.log('Error al acceder al archivo: ' + fileError);
          }
        }
      }
    }
    
    // Search web
    Logger.log('Iniciando búsqueda web para: ' + concepto);
    const webResult = searchCGRFiles(concepto);
    if (webResult) {
      Logger.log('Resultado web encontrado, guardando en carpeta');
      const savedFile = saveWebResultToFolder(webResult, folder);
      if (savedFile) {
        results.web = savedFile;
        Logger.log('Archivo web guardado: ' + savedFile.name);
      }
    }
    
    Logger.log('Resultados procesados - Drive: ' + results.drive.length + ', Web: ' + (results.web ? '1' : '0'));
    return results;
    
  } catch(e) {
    Logger.log('Error en processSearchResults: ' + e);
    return {
      web: null,
      drive: [],
      folderUrl: folder.getUrl()
    };
  }
}

// Generate HTML for processed results
function generateProcessedResultsHtml(results) {
  let resultsHtml = '';
  
  if (results.web) {
    resultsHtml += `<strong>Documento CGR:</strong><br>
      <a href="${results.web.url}" target="_blank">${results.web.name}</a>
      ${results.web.type === 'converted' ? ' (Convertido a Google Doc)' : ''}<br>`;
  }
  
  if (results.drive.length > 0) {
    if (resultsHtml) resultsHtml += '<br><br>';
    resultsHtml += '<strong>Documentos encontrados:</strong><br>' + 
      results.drive.map(file => 
        `<a href="${file.url}" target="_blank">${file.name}</a>
         ${file.type === 'converted' ? ' (Convertido a Google Doc)' : ''}`
      ).join('<br>');
  }
  
  if (!resultsHtml) {
    resultsHtml = 'No se encontraron resultados';
  }
  
  return resultsHtml;
}

function sendResultEmail(sender, procedimientoNum, pages, originalMessage, emailDate) {
  try {
    var attachments = [];
    var htmlAttachments = [
      {fileName: 'sicop_busqueda.html', content: pages.search.getBytes(), mimeType: 'text/html'},
      {fileName: 'sicop_detalles.html', content: pages.details.getBytes(), mimeType: 'text/html'},
      {fileName: 'sicop_descripcion.html', content: pages.description.getBytes(), mimeType: 'text/html'}
    ];

    // Crear carpeta para el procedimiento
    const procedureFolder = createProcedureFolder(procedimientoNum);
    let folderInfo = `<tr>
      <td style="padding:8px; border:1px solid #ddd;"><strong>Carpeta de documentos</strong></td>
      <td style="padding:8px; border:1px solid #ddd;">
        <a href="${procedureFolder.url}" target="_blank">Ver documentos del procedimiento</a>
      </td>
    </tr>`;

    const detailsHtml = pages.details.getDataAsString();
    const objetosMatch = detailsHtml.match(/fn_datailRecurso\('([^']+)',\s*'([^']+)',\s*1\)/);
    let summariesHtml = '';
    let pdfMessage = '';

    if(objetosMatch) {
      const [_, cartelNo, cartelSeq] = objetosMatch;
      const recursosUrl = `https://www.sicop.go.cr/moduloOferta/search/EP_SEJ_POQ400.jsp?cartelNo=${cartelNo}&cartelSeq=${cartelSeq}&reqNew=1`;
      
      const recursosResponse = UrlFetchApp.fetch(recursosUrl, {muteHttpExceptions: true});
      const recursosHtml = recursosResponse.getContentText();

      htmlAttachments.push({
        fileName: 'listado_recursos.html',
        content: Utilities.newBlob(recursosHtml).getBytes(),
        mimeType: 'text/html'
      });

      const recursosEnProceso = recursosHtml.match(/js_recursoDetail\('(\d+)',\s*'([^']+)',\s*'([^']+)',\s*'([^']*)'\)[^>]*>En proceso/g) || [];
      let recursoNum = 1;
      
      for(const row of recursosEnProceso) {
        const params = row.match(/js_recursoDetail\('(\d+)',\s*'([^']+)',\s*'([^']+)',\s*'([^']*)'\)/);
        if(params) {
          const [_, recursoSeqno, cartelNo, cartelSeq, cartelCate] = params;
          
          const detalleUrl = `https://www.sicop.go.cr/moduloOferta/search/EP_SEJ_POQ402.jsp?recursoSeqno=${recursoSeqno}&cartelNo=${cartelNo}&cartelSeq=${cartelSeq}&cartelCate=${cartelCate}&reqNew=1`;
          const detalleResponse = UrlFetchApp.fetch(detalleUrl, {muteHttpExceptions: true});
          const detalleHtml = detalleResponse.getContentText();

          htmlAttachments.push({
            fileName: `recurso_detalle_${recursoNum}.html`,
            content: Utilities.newBlob(detalleHtml).getBytes(),
            mimeType: 'text/html'
          });

          const contenidoMatch = /<textarea[^>]*name\s*=\s*["']recursoCont["'][^>]*>([\s\S]*?)<\/textarea>/i.exec(detalleHtml);
          
          if(contenidoMatch && contenidoMatch[1]) {
            const contenido = contenidoMatch[1].trim();
            
            try {
              const response = UrlFetchApp.fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + GEMINI_API_KEY, {
                method: 'POST',
                contentType: 'application/json',
                payload: JSON.stringify({
                  contents: [{
                    parts: [{
                      text: `haz un resumen de los principales argumentos del recurso de objeción, títula cada argumento con una idea principal y ponle dos punto al final de esa idea.Haz el resument de cada argumento en un sólo párrafo.Siempre debes incluir  la petitoria del recurso al final del resumen con el título Petitoria:. No ennumeres los argumentos ni la Petitoria.Al final del resumen pon en mayúscula cuatro conceptos claves de máximo tres palabras, separados por punto y coma cada uno de estos conceptos. \n\n${contenido}`
                    }]
                  }],
                  generationConfig: {
                    temperature: 0.7,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 1024,
                  }
                }),
                muteHttpExceptions: true
              });
              
              const result = JSON.parse(response.getContentText());
              let summary = result.candidates[0].content.parts[0].text;
              
              // Guardar el texto del recurso en la carpeta
              const recursoFile = saveRecursoToFolder(contenido, procedimientoNum, recursoNum, procedureFolder.folder);
              
              // Procesar el resumen y obtener conceptos limpios
              const { formattedText, cleanedConcepts } = processConceptsAndFormat(summary);
              
              let summaryHtml = `
                <tr>
                  <td style="padding:8px; border:1px solid #ddd;"><strong>Resumen recurso ${recursoNum}</strong></td>
                  <td style="padding:8px; border:1px solid #ddd;">${formattedText}</td>
                </tr>`;

              // Procesar cada concepto limpio
              for (const concepto of cleanedConcepts) {
                Logger.log('Procesando concepto: ' + concepto);
                const searchResults = processSearchResults(concepto, procedureFolder.id);
                
                summaryHtml += `
                  <tr>
                    <td style="padding:8px; border:1px solid #ddd;"><strong>Concepto - ${concepto}</strong></td>
                    <td style="padding:8px; border:1px solid #ddd;">${generateProcessedResultsHtml(searchResults)}</td>
                  </tr>`;
              }

              summariesHtml += summaryHtml;
              attachments.push(Utilities.newBlob(contenido, 'text/plain', `recurso_${recursoNum}.txt`));
            } catch (e) {
              Logger.log('Error: ' + e.toString());
              summariesHtml += `<tr>
                <td style="padding:8px; border:1px solid #ddd;"><strong>Resumen recurso ${recursoNum}</strong></td>
                <td style="padding:8px; border:1px solid #ddd;">Error al generar resumen del recurso.</td>
              </tr>`;
            }
          }
          recursoNum++;
          Utilities.sleep(2000);
        }
      }
    }

    try {
      for (const page of ['search', 'details', 'description']) {
        var pdf = convertHtmlToPdfViaDoc(pages[page].getDataAsString(), 'sicop_' + page);
        if (pdf) attachments.push(pdf);
      }
    } catch (pdfError) {
      if (pdfError.message.includes('Service unavailable') || pdfError.message.includes('Service invoked too many times')) {
        pdfMessage = '<br><br><strong>Nota: Servicio de conversión a PDF no disponible temporalmente. Se adjuntan archivos HTML.</strong>';
        attachments = htmlAttachments;
      } else {
        throw pdfError;
      }
    }

    if (!pdfMessage) {
      attachments = attachments.concat(htmlAttachments);
    }

    var dateAnalysis = analyzeDates(emailDate, pages.details.getDataAsString());
    
    var htmlBody = '<div style="font-family: Arial, sans-serif; font-size: 12pt; font-weight: bold;">' +
                '<table style="width:100%; border-collapse: collapse; margin-bottom: 20px;">' +
                '<tr><td style="padding:8px; border:1px solid #ddd;"><strong>Procedimiento</strong></td>' +
                '<td style="padding:8px; border:1px solid #ddd;">' + procedimientoNum + '</td></tr>' +
                folderInfo +  // Agregamos el link a la carpeta
                '<tr><td style="padding:8px; border:1px solid #ddd;"><strong>Fecha de remisión de correo SICOP</strong></td>' +
                '<td style="padding:8px; border:1px solid #ddd;">' + dateAnalysis.emailDate + '</td></tr>' +
                '<tr><td style="padding:8px; border:1px solid #ddd;"><strong>Fecha de publicación del cartel</strong></td>' +
                '<td style="padding:8px; border:1px solid #ddd;">' + dateAnalysis.publicationDate + '</td></tr>' +
                '<tr><td style="padding:8px; border:1px solid #ddd;"><strong>Días hábiles</strong></td>' +
                '<td style="padding:8px; border:1px solid #ddd;">' + dateAnalysis.workingDays + '</td></tr>' +
                '<tr><td style="padding:8px; border:1px solid #ddd;"><strong>Estado</strong></td>' +
                '<td style="padding:8px; border:1px solid #ddd;"><strong>' + dateAnalysis.status + '</strong></td></tr>' +
                summariesHtml +
                '<tr><td style="padding:8px; border:1px solid #ddd;"><strong>URLs consultadas</strong></td>' +
                '<td style="padding:8px; border:1px solid #ddd;">1. ' + pages.urls[0] + '<br>2. ' + pages.urls[1] + '<br>3. ' + pages.urls[2] + '</td></tr>' +
                '</table>' +
                pdfMessage +
                '</div>';

    GmailApp.sendEmail(
      sender,
      'Resultado SICOP - Procedimiento ' + procedimientoNum,
      '', 
      {
        htmlBody: htmlBody,
        attachments: attachments,
        replyTo: originalMessage.getReplyTo() || sender
      }
    );

    Logger.log('Correo enviado');
  } catch (e) {
    logError('EMAIL_SEND_ERROR', e);
    if (e.message.includes('Service unavailable')) {
      Utilities.sleep(Math.pow(2, attempt) * 1000);
      sendResultEmail(sender, procedimientoNum, pages, originalMessage, emailDate, attempt + 1);
    }
  }
}

function sendErrorEmail(sender, procedimientoNum, errorMessage) {
  try {
    var htmlBody = '<div style="font-family: Arial, sans-serif; font-size: 12pt; font-weight: bold;">' +
                  'Ocurrió un error al procesar la consulta:<br><br>' + 
                  errorMessage +
                  '</div>';
                  
    GmailApp.sendEmail(
      sender,
      'Error SICOP - Procedimiento ' + procedimientoNum,
      '',
      {
        htmlBody: htmlBody
      }
    );
  } catch (e) {
    logError('ERROR_EMAIL_SEND_ERROR', e);
  }
}

function logError(errorType, error) {
  const errorLog = {
    timestamp: new Date().toISOString(),
    type: errorType,
    message: error.message,
    stack: error.stack
  };
  Logger.log('ERROR - ' + JSON.stringify(errorLog));
}