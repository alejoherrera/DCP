function createTrigger() {
  // Eliminar triggers existentes
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
  
  // Crear nuevo trigger cada minuto
  ScriptApp.newTrigger('checkNewEmails')
    .timeBased()
    .everyMinutes(1)
    .create();
}

function checkNewEmails() {
  try {
    var threads = GmailApp.search('from:*@cgr.go.cr has:nouserlabels is:unread "SICOP le informa"');
    Logger.log('Correos encontrados: ' + threads.length);
    
    // Procesar todos los hilos
    for (var i = 0; i < threads.length; i++) {
      var messages = threads[i].getMessages();
      
      // Procesar todos los mensajes en el hilo
      for (var j = 0; j < messages.length; j++) {
        var message = messages[j];
        processMessage(message);
      }
      
      // Marcar el hilo como leído después de procesar todos sus mensajes
      threads[i].markRead();
    }
  } catch (e) {
    logError('EMAIL_SEARCH_ERROR', e);
  }
}

function processMessage(message) {
  try {
    var body = message.getPlainBody();
    var sender = message.getFrom().match(/<(.+?)>/)[1] || message.getFrom();
    var emailDate = new Date(message.getDate());
    
    Logger.log('Procesando correo de: ' + sender);
    Logger.log('Contenido del correo: ' + body);
    
    // Buscar el número de procedimiento con asteriscos o sin ellos
    var procedimientoMatch = body.match(/procedimiento número \*?(\d{4}LY-\d{6}-\d{10})\*?/i) || 
                            body.match(/contra el procedimiento número \*?(\d{4}LY-\d{6}-\d{10})\*?/i) ||
                            body.match(/procedimiento número \*?(\d{4}LE-\d{6}-\d{10})\*?/i);
                            
    if (!procedimientoMatch) {
      // Si no se encuentra, buscar de forma más genérica
      procedimientoMatch = body.match(/\*?(\d{4}LY-\d{6}-\d{10})\*?/i) || 
                          body.match(/\*?(\d{4}LE-\d{6}-\d{10})\*?/i);
    }
    
    if (!procedimientoMatch) {
      logError('INVALID_FORMAT_ERROR', new Error('Formato de procedimiento no encontrado en el correo'));
      Logger.log('No se encontró procedimiento en el texto: ' + body);
      return;
    }

    var procedimientoNum = procedimientoMatch[1];
    Logger.log('Procedimiento encontrado: ' + procedimientoNum);
    
    fetchSICOPPage(procedimientoNum, sender, message, emailDate);
  } catch (e) {
    logError('MESSAGE_PROCESSING_ERROR', e);
  }
}

function isWorkingDay(date) {
  var day = date.getDay();
  return day !== 0 && day !== 6;
}

function getWorkingDays(startDate, endDate) {
  let workingDays = 0;
  const currentDate = new Date(startDate);
  
  while (currentDate <= endDate) {
    if (isWorkingDay(currentDate)) {
      workingDays++;
    }
    currentDate.setDate(currentDate.getDate() + 1);
  }
  return workingDays;
}

function extractPublicationDate(html) {
  // Buscar todas las fechas en la tabla
  const regex = /class="tdc"[^>]*>\s*(\d{2}\/\d{2}\/\d{4})\s*</g;
  const dates = [];
  let match;
  
  while ((match = regex.exec(html)) !== null) {
    const [_, dateStr] = match;
    const [day, month, year] = dateStr.trim().split('/').map(Number);
    dates.push(new Date(year, month - 1, day));
  }

  if (dates.length === 0) {
    throw new Error('No se encontró la fecha de publicación');
  }

  // Encontrar la fecha más reciente
  const latestDate = new Date(Math.max.apply(null, dates));
  return latestDate;
}

function analyzeDates(emailDate, detailsHtml) {
  Logger.log('Contenido HTML para analizar fechas:', detailsHtml.substring(0, 500));
  const publicationDate = extractPublicationDate(detailsHtml);
  Logger.log('Fecha de publicación encontrada:', publicationDate);
  Logger.log('Fecha del correo:', emailDate);
  
  const workingDays = getWorkingDays(publicationDate, emailDate);
  const status = workingDays <= 10 ? 'EN TIEMPO' : 'EXTEMPORÁNEO';
  
  const formatDate = (date) => {
    return date.toLocaleDateString('es-CR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  return {
    emailDate: formatDate(emailDate),
    publicationDate: formatDate(publicationDate),
    workingDays: workingDays,
    status: status
  };
}

function fetchSICOPPage(procedimientoNum, sender, originalMessage, emailDate) {
  const searchUrl = 'https://www.sicop.go.cr/moduloPcont/pcont/ctract/es/CE_CEJ_ESQ001.jsp';
  const resultsUrl = 'https://www.sicop.go.cr/moduloPcont/pcont/ctract/es/CE_CEJ_ESQ002.jsp';
  const detailUrl = 'https://www.sicop.go.cr/moduloPcont/pcont/ctract/es/CE_CEJ_ESQ003.jsp';
  
  try {
    var searchOptions = {
      'method': 'post',
      'payload': {
        'sch_instNo': procedimientoNum,
        'reqNo': '',
        'cartelNo': '',
        'sch_reqNo': '',
        'sch_reqIdoNo': ''
      },
      'followRedirects': true,
      'muteHttpExceptions': true
    };

    Logger.log('Enviando solicitud inicial a SICOP...');
    var response1 = UrlFetchApp.fetch(searchUrl, searchOptions);
    Utilities.sleep(2000);
    
    var html = response1.getContentText();
    var reqNoMatch = html.match(/fn_detail\('([^']+)','([^']+)'\)/);
    if (!reqNoMatch) {
      throw new Error('No se encontraron los parámetros necesarios');
    }
    
    var reqNo = reqNoMatch[1];
    var cartelNo = reqNoMatch[2];
    
    var detailOptions = {
      'method': 'post',
      'payload': {
        'reqNo': reqNo,
        'cartelNo': cartelNo
      },
      'followRedirects': true,
      'muteHttpExceptions': true
    };
    
    Logger.log('Obteniendo detalles del procedimiento...');
    var response2 = UrlFetchApp.fetch(resultsUrl, detailOptions);
    Utilities.sleep(2000);
    
    var descriptionOptions = {
      'method': 'post',
      'payload': {
        'reqNo': reqNo,
        'cartelNo': cartelNo,
        'accion': 'consultar_descripcion'
      },
      'muteHttpExceptions': true
    };
    
    Logger.log('Obteniendo descripción...');
    var response3 = UrlFetchApp.fetch(detailUrl, descriptionOptions);
    
    var pages = {
      search: response1.getBlob(),
      details: response2.getBlob(),
      description: response3.getBlob(),
      urls: [searchUrl, resultsUrl, detailUrl]
    };
    
    sendResultEmail(sender, procedimientoNum, pages, originalMessage, emailDate);
  } catch (e) {
    logError('SICOP_REQUEST_ERROR', e);
    sendErrorEmail(sender, procedimientoNum, e.toString());
  }
}

function sendResultEmail(sender, procedimientoNum, pages, originalMessage, emailDate) {
  try {
    // Convertir las páginas HTML a PDF
    var pdfAttachments = [];
    var htmlAttachments = [
      {
        fileName: 'sicop_busqueda.html',
        content: pages.search.getBytes(),
        mimeType: 'text/html'
      },
      {
        fileName: 'sicop_detalles.html',
        content: pages.details.getBytes(),
        mimeType: 'text/html'
      },
      {
        fileName: 'sicop_descripcion.html',
        content: pages.description.getBytes(),
        mimeType: 'text/html'
      }
    ];

    // Función para convertir HTML a PDF
    function convertHtmlToPdf(htmlContent, fileName) {
      var blob = Utilities.newBlob(htmlContent, 'text/html', fileName + '.html');
      var pdf = DriveApp.createFile(blob.getAs('application/pdf'));
      return pdf;
    }

    // Convertir cada página HTML a PDF
    var searchPdf = convertHtmlToPdf(pages.search.getDataAsString(), 'sicop_busqueda');
    var detailsPdf = convertHtmlToPdf(pages.details.getDataAsString(), 'sicop_detalles');
    var descriptionPdf = convertHtmlToPdf(pages.description.getDataAsString(), 'sicop_descripcion');

    // Agregar los PDFs a los adjuntos
    pdfAttachments.push(
      {
        fileName: 'sicop_busqueda.pdf',
        content: searchPdf.getBlob().getBytes(),
        mimeType: 'application/pdf'
      },
      {
        fileName: 'sicop_detalles.pdf',
        content: detailsPdf.getBlob().getBytes(),
        mimeType: 'application/pdf'
      },
      {
        fileName: 'sicop_descripcion.pdf',
        content: descriptionPdf.getBlob().getBytes(),
        mimeType: 'application/pdf'
      }
    );

    // Combinar adjuntos HTML y PDF
    var attachments = htmlAttachments.concat(pdfAttachments);

    // Analizar fechas
    var dateAnalysis = analyzeDates(emailDate, pages.details.getDataAsString());

    // Crear el cuerpo del correo
    var htmlBody = '<div style="font-family: Arial, sans-serif; font-size: 12pt; font-weight: bold;">' +
               'Se comparó la fecha de remisión de correo de SICOP (' + dateAnalysis.emailDate + 
               ') y la última fecha de publicación del cartel (' + dateAnalysis.publicationDate + 
               ') y son ' + dateAnalysis.workingDays + ' días hábiles, por lo tanto el recurso está ' + 
               dateAnalysis.status + '.' +
               '<br><br>' +
               'Adjunto encontrará los resultados de la consulta:<br>' +
               'Procedimiento: ' + procedimientoNum + '<br>' +
               'URLs consultadas:<br>' +
               '1. ' + pages.urls[0] + '<br>' +
               '2. ' + pages.urls[1] + '<br>' +
               '3. ' + pages.urls[2] +
               '</div>';

    // Enviar el correo con los adjuntos
    GmailApp.sendEmail(
      sender,
      'Resultado SICOP - Procedimiento ' + procedimientoNum,
      '', // Cuerpo texto plano
      {
        htmlBody: htmlBody,
        attachments: attachments,
        replyTo: originalMessage.getReplyTo() || sender
      }
    );

    // Eliminar los archivos PDF temporales de Google Drive
    DriveApp.getFileById(searchPdf.getId()).setTrashed(true);
    DriveApp.getFileById(detailsPdf.getId()).setTrashed(true);
    DriveApp.getFileById(descriptionPdf.getId()).setTrashed(true);

    Logger.log('Correo enviado a: ' + sender);
  } catch (e) {
    logError('EMAIL_SEND_ERROR', e);
  }
}

function sendErrorEmail(sender, procedimientoNum, errorMessage) {
  try {
    var htmlBody = '<div style="font-family: Arial, sans-serif; font-size: 12pt; font-weight: bold;">' +
                  'Ocurrió un error al procesar la consulta:<br><br>' + 
                  errorMessage +
                  '</div>';
                  
    GmailApp.sendEmail(
      sender,
      'Error SICOP - Procedimiento ' + procedimientoNum,
      '',
      {
        htmlBody: htmlBody
      }
    );
  } catch (e) {
    logError('ERROR_EMAIL_SEND_ERROR', e);
  }
}

function logError(errorType, error) {
  const errorLog = {
    timestamp: new Date().toISOString(),
    type: errorType,
    message: error.message,
    stack: error.stack
  };
  Logger.log('ERROR - ' + JSON.stringify(errorLog));
}